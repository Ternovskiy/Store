@using DataModul.DomainModel
@model Store.Models.ViewProduct
@{
    ViewBag.Title = "Create";
}
<h2>@ViewBag.Flag </h2>


@using (Html.BeginForm("Create","Product"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.HiddenFor(m => m.ProductId)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.HiddenFor(m=>Model.Category)*@
                @*@Html.Partial("AddCategory",Model.Category)*@
                @if (Model.Category != null)
                {
                    for (int i = 0; i < Model.Category.Count; i++)
                    {
                        string idcat = "catergory" + Model.Category[i].CategoryId;
                        <div id='@idcat'>
                            @Html.HiddenFor(p => Model.Category[i].CategoryId)
                            @Html.DisplayFor(p => Model.Category[i].Name)
                            <button type="button" onclick="$('#@idcat').remove();@{Model.Category.Remove(Model.Category[i]);}">
                                Del
                            </button>
                        </div>
                }
                }
                <div id="catergory7">
                    <input data-val="true" data-val-number="The field CategoryId must be a number." data-val-required="Требуется поле CategoryId." id="Category_1__CategoryId" name="Category[2].CategoryId" type="hidden" value="6">
                    Other
                    <button type="button" onclick="$('#catergory6').remove();">
                        Del
                    </button>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
